package fr.enssat.leave_manager.controller;

import fr.enssat.leave_manager.model.Department;
import fr.enssat.leave_manager.repo.DepartmentRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.io.InvalidObjectException;
import java.util.*;

@Controller
public class DepartmentController {
    @Autowired
    private DepartmentRepository repository;

    @GetMapping("/department")
    public ModelAndView getDepartments(
            @RequestParam(name = "id", required = false) String id,
            @RequestParam(name = "name", required = false) String name) {
        // TODO 'name' param (name is unique)
        String viewName = "departments";
        List<Department> departments = new ArrayList<>();

        if (id == null && name == null) {
            departments = repository.findAll();
        } else if (id != null) { // id has priority
            Optional<Department> dept = repository.findById(id);
            try {
                departments.add(dept.get());
            } catch (NoSuchElementException e) {}
        } else if (name != null) {
            Optional<Department> dept = repository.findByName(name);
            try {
                departments.add(dept.get());
            } catch (NoSuchElementException e) {}
        }

        Map<String, Object> data = new HashMap<>();
        data.put("departments", departments);
        data.put("size", departments.size());

        return new ModelAndView(viewName, data);
    }

    @PostMapping(value = "/department", consumes = "application/json")
    public ModelAndView postDepartment(@RequestBody Map<String, Object> body){
        try {
            Object name = body.get("name");
            if (!(name instanceof String)) throw new InvalidObjectException("Erreur, paramètres inattendu !");

            Department dept = new Department((String) name); // constructor auto generated by lombok
            dept.setId();
            dept = repository.saveAndFlush(dept);

            return this.getDepartments(dept.getId(), null); // method '.getId' auto generated by lombok
//        } catch (PSQLException e) { // FIXME "cannot resolve 'org.postgresql.util.PSQLException'" ?
//            System.err.println("Ce département existe déjà !");
//            return this.getDepartments(null);
        } catch (InvalidObjectException e) {
            System.err.println(e.getMessage()); // FIXME send error message
            return this.getDepartments(null, null);
        }
    }

    @DeleteMapping("/department")
    public ModelAndView deleteDepartment(@RequestParam(name = "id") String id) {
        Optional<Department> dept = repository.findById(id);
        try {
            dept.get(); // throw Exception if department not found
            repository.deleteById(id);

            return this.getDepartments(null, null);
        } catch (NoSuchElementException e) {
            // FIXME send error message "Departement inconnu !"
            return this.getDepartments(null, null);
        }
    }
}
